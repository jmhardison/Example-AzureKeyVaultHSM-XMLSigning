name: Build and Release

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build and publish for multiple platforms
      run: |
        dotnet publish -c Release --self-contained -r osx-x64
        dotnet publish -c Release --self-contained -r linux-x64
        dotnet publish -c Release --self-contained -r win-x64

    - name: Upload Linux x64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64-binaries
        path: cli-exakvdocsign/bin/Release/net8.0/linux-x64/publish/

    - name: Upload macOS x64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: osx-x64-binaries
        path: cli-exakvdocsign/bin/Release/net8.0/osx-x64/publish/

    - name: Upload Windows x64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: win-x64-binaries
        path: cli-exakvdocsign/bin/Release/net8.0/win-x64/publish/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version calculation

    - name: Calculate next version
      id: version
      run: |
        # Get the latest tag, default to 0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"

        # Increment patch version (you can modify this logic as needed)
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}

        # Increment patch version
        PATCH=$((PATCH + 1))

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"

        echo "Next version: $NEW_VERSION"
        echo "Next tag: $NEW_TAG"

        # Set outputs
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body: |
          ## Changes
          ${{ github.event.head_commit.message }}

          ## Assets
          - linux-x64-binaries.zip - Linux x64 executable
          - osx-x64-binaries.zip - macOS x64 executable
          - win-x64-binaries.zip - Windows x64 executable
        draft: false
        prerelease: false

    - name: Zip Linux artifacts
      run: |
        cd linux-x64-binaries
        zip -r ../linux-x64-binaries.zip .
        cd ..

    - name: Zip macOS artifacts
      run: |
        cd osx-x64-binaries
        zip -r ../osx-x64-binaries.zip .
        cd ..

    - name: Zip Windows artifacts
      run: |
        cd win-x64-binaries
        zip -r ../win-x64-binaries.zip .
        cd ..

    - name: Upload linux-x64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-x64-binaries.zip
        asset_name: linux-x64-binaries.zip
        asset_content_type: application/zip

    - name: Upload osx-x64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./osx-x64-binaries.zip
        asset_name: osx-x64-binaries.zip
        asset_content_type: application/zip

    - name: Upload win-x64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./win-x64-binaries.zip
        asset_name: win-x64-binaries.zip
        asset_content_type: application/zip